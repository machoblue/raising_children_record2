rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents/environments/{environment} {

    // match /{document=**} {
    //   allow read, write: if true;
    // }
    
    function isSignedIn() {
    	return request.auth.uid != null;
    }
    
    function userExists() {
    	return exists(/databases/$(database)/documents/environments/$(environment)/users/$(request.auth.uid));
    }
    
    function familyContainsRequestUser(familyId) {
    	return exists(/databases/$(database)/documents/environments/$(environment)/families/$(familyId)/users/$(request.auth.uid));
    }
    
    function hasValidInvitationCode(familyId) {
      return request.time < get(/databases/$(database)/documents/environments/$(environment)/families/$(familyId)/invitationCodes/$(request.resource.data.invitationCode)).data.expirationDate;
    }
    
    function familyNotExists(familyId) {
      return !exists(/databases/$(database)/documents/environments/$(environment)/families/$(familyId));
    }
    
    match /families/{familyId}/{document=**} {
      allow read, write: if familyContainsRequestUser(familyId);
    }
    
    match /families/{familyId}/users/{userId} {
    	allow create: if userExists() && (familyNotExists(familyId) || hasValidInvitationCode(familyId));
    }
    
    match /users/{userId} {
    	allow read, update, delete: if request.auth.uid == userId;
      allow create: if isSignedIn();
    }
  }
}